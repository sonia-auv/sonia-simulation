//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.SoniaCommon
{
    [Serializable]
    public class AddPoseMsg : Message
    {
        public const string k_RosMessageName = "sonia_common/AddPose";
        public override string RosMessageName => k_RosMessageName;

        public Geometry.PointMsg position;
        public Geometry.Vector3Msg orientation;
        public byte frame;
        public byte speed;
        public double fine;
        public bool rotation;
        //  Determine if the rotation is full path or short path.

        public AddPoseMsg()
        {
            this.position = new Geometry.PointMsg();
            this.orientation = new Geometry.Vector3Msg();
            this.frame = 0;
            this.speed = 0;
            this.fine = 0.0;
            this.rotation = false;
        }

        public AddPoseMsg(Geometry.PointMsg position, Geometry.Vector3Msg orientation, byte frame, byte speed, double fine, bool rotation)
        {
            this.position = position;
            this.orientation = orientation;
            this.frame = frame;
            this.speed = speed;
            this.fine = fine;
            this.rotation = rotation;
        }

        public static AddPoseMsg Deserialize(MessageDeserializer deserializer) => new AddPoseMsg(deserializer);

        private AddPoseMsg(MessageDeserializer deserializer)
        {
            this.position = Geometry.PointMsg.Deserialize(deserializer);
            this.orientation = Geometry.Vector3Msg.Deserialize(deserializer);
            deserializer.Read(out this.frame);
            deserializer.Read(out this.speed);
            deserializer.Read(out this.fine);
            deserializer.Read(out this.rotation);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.position);
            serializer.Write(this.orientation);
            serializer.Write(this.frame);
            serializer.Write(this.speed);
            serializer.Write(this.fine);
            serializer.Write(this.rotation);
        }

        public override string ToString()
        {
            return "AddPoseMsg: " +
            "\nposition: " + position.ToString() +
            "\norientation: " + orientation.ToString() +
            "\nframe: " + frame.ToString() +
            "\nspeed: " + speed.ToString() +
            "\nfine: " + fine.ToString() +
            "\nrotation: " + rotation.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
